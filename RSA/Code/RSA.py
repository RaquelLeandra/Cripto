"""
El objetivo de este c칩digo es desencriptar el coso de la pr치ctica

Comandos openssl:

openssl rsa -inform PEM -pubin  -in raquel.leandra.perez_pubkeyRSA_RW.pem -text -modulus

openssl rsautl -decrypt -in raquel.leandra.perez_RSA_pseudo.enc -out plain -inkey privatekey.pem -pkcs
"""
import os
from Crypto.PublicKey import RSA


def generate_pseudo_private_key():
    n = 0x1E13E6D54B6904DA460E77ECF938FBEA79BEBB8316C9B995C0BF3758EB52680E89FCA01B40CEC744099634EA4E0F1A00221E57D05A58630B921099F8B3969DD94E96FA2E43C1C1543975B4BF8E0893CD43F4F3F6375EC46C2071D585FE96A8F785B0FA2876F66727695759B08BA0A1A7DF304D64898E7003DCE6D08236AE787AE92E55F47E0CAA6D71B4C1759D9DAED45F7B19E4B1B37523921D29ADBCED9568DA62BE456ACE11C1BF790F021D931A3371A593E5663E878EDE17875C9C1047FEF2CE4D5B87773C50E480E87854392518CA81CF1B7C68AE5062D43F96036D94BA9962FC433562C9A5D630CE40FCCF5368E91AFDF7DCDAAE3C9915DD678816B41

    prod = 18431202234869176927 ^ 16 * 184419661078732104043081146995655060809 ^ 8

    p = 18431202234869176927 ** 16
    q = 184419661078732104043081146995655060809 ** 8

    e = 65537

    d = 196139296257011791327304912882510776641918790278726838075068112531379689163035699350848010070791186774540936578894377925769055840683210770943876696099542536789717291034872088036738372446880621680844611634842594758033660662956360447847622265386213708059264186398771728862402836867270368050670527540075618997465691320659489298899893973763555776566224696045472070515185749610281565727647275333824956060776293179824178310851091978356538676563218518668609416598918247493739536115331308774806210610839031774116255790889613628390022964632352695359875165552856878623319113853545238032962529514347405310432519071887843726449
    myRSA = RSA.construct([n, e, d, p, q])
    f = open('../Pr치ctica/privatekey.pem', 'wb')
    f.write(myRSA.exportKey('PEM'))
    f.close()


def generate_all_modules():
    path = '../keys/'
    files_list = os.listdir(path)
    keys = open(path + 'allModules', 'w')
    keys.write('[')
    for file in files_list:
        if file != 'allModulesWithName':
            current_file = open(path + file, 'r')
            current_file_module = current_file.readline()
            # keys.write(file[0:15] + current_file_module[0:8] + '0x'+current_file_module[8:]+ ', ')
            keys.write('0x' + current_file_module[8:] + ', ')
            current_file.close()
    keys.write(']')
    keys.close()


def generate_private_key():
    n = 0xD8262A66116D6D99A38B1B9D661C8654AC4757B8696D437DD60685B96A2C9A63304353399BAB8D336CF790683EC1E851E5787235E602E3165E06936CE85E5DF7B7CDCA3884BF985709A321FB7D0304EA298097269749C978C10813F71012DA6856185812364200B681CD41C46B12DCA5757B3830B1D95D85D1D5A0FF91A2CA8A45CE9C4A37548AC9B01B7BC5BE340029BA525AFAC58991A2CA0798CEA6C1BE9F1A7E3D5139D1B7EB6E0DB7C2CAADB19DF91351AFBC4EB1DAD91AB9F00A3EA858DDEE0920F04820D8CC6FFB540D3648BB5D711F7B18BC496FA4266CCA8F058E14E9BAEB7D406D4A7E3CCA259056829721FE71863D20DC5A9B586DA267F690A209
    p = 163433271817697418294370790052141394172458066413925086769221391889790227690026209043783702905670862558708044283042968686857507224834478626000262371721659880095254075310686556781362382331969795281587117978948025723058426408342273538621224499689803243358908323465675069461712304481092750748325451659042804015669
    q = 166956787548943363603711329064869362462710170932575095052758142837329262876985138490901795115326879641507998383926156993411119841343889024419001358791855822475888741936723726972800282646945148419376016170353044927596755070997826086794773381010822366130948087636431472415783807232235320372851096645915943762693

    e = 65537

    d = 1239819276733845006146567834193240468207465872109208221682134587095462847687833507146649665375713053282642168971263125840187775912064970678425279377811908160497026583879514930773232516709596572140138506860523303644235040606139898432082077230036490524898320091225454350480288512984127784616738337670473497129280239624685351458192816771367771457802837283614896201474438633509601953367715189470734373801533817242984392161926878862701608427095037447282272758601248584839365660921628345587362667863789104764758514671574294416428218713130167159222803349514991310839750129215404020571576115434228105162833203105523945115689

    myRSA = RSA.construct([n, e, d, p, q])
    f = open('../Pr치ctica/private_RW_key.pem', 'wb')
    f.write(myRSA.exportKey('PEM'))
    f.close()


def main():
    generate_private_key()

if __name__ == "__main__":
    main()